---------------------------------------------------------------------------------------------------------------------------------------------
                                        Hyper Text Markup Language (HTML)
---------------------------------------------------------------------------------------------------------------------------------------------

html -<html></html>
markup language: set of rules that will define what type of content should be displayed on the browser
head -<h1></h1>
body -<body></body>
paragragh -<p></p>
bold - <b></b>
italic -<em></em>
superlative -<sup></sup>
subscript -<sub></sub>
strike -<s></s>
highlight -<mark></mark>
link -<a></a>
block tag -take entire width ,eg -<h></h> <p></p>
inline tag -only take needed width ,eg -<a href=""></a>,<img>
inline to block tag(to break a inline) -<br>
target="blank" -to load page in differnet tab -<a href="" target="blank"></a>
ordered list -<ol><li></li></ol>
unorderd list -<ul><li></li></ul>
decription list -<dl><dt><dd></dd></dt></dl>
visible horizontal line -<hr>
form -for inputing -<form></form>
label -inside form to -<label for="name">name</label>
input -to input text,number ... -<input type="text">
button -to input -<button type="submit">submit</button>
textarea -to input large text -<textarea name="" id=""></textarea>
radio button -to chose from multiple option -<input type="radio"><label></label>
select -to select from option like dropdown box -<select name="" id=""><option></option></select>
hidden -an attribute of option in select to hide an option -<option hidden></option>
checkbox -to choose multiple option from options -<input type="checkbox"><label>java</label>
table -used to display contents in rows and colmun -<table><thead></thead><tbody><tr></tr><td></td><th></th></tbody></table>
for row -<tr></tr> ,for colmun -<td></td>, for colmun in bold -<th></th>
colspan -to merge colmun <td colspan=""></td>
rowspan -to merge row <td rowspan=""></td>
image -to display image -<img src="" alt="">
width - an attribute in img tag to adjust size <img width="px" src="">
container -to contain multiple tags -<div></div>(comonly used),<section></section>,<article></article>
video -to display a videos -<video src=""></video>
semantic tags -to easy for search engine -<header></header>,<nav></nav>,<section></section>,<article></article>,<aside></aside>,<footer></footer>

---------------------------------------------------------------------------------------------------------------------------------------------
                                           Cascading Style Sheet (CSS)
--------------------------------------------------------------------------------------------------------------------------------------------

css is style sheet
inline css -to style as atribute-<p style="color: red;">css</p>
internal  css -to using selectors ther are differnert type of selectors-<style></style>
external css -to style in another file and link together html and css file - <link rel="stylesheet" href="./css.style">
selectors -to acceses tags for styling -tag name,id-"#",class-"."(to group and change unifotmly),universal -"*"(to change every tags unversly),css combinators to group differnet tag name,id,class and same tag name,id,class
grouping -use coma ,
decentent -use space
child -use greater than >
sibling -use tiled ~
immediate -use +
<!-- css properties -->
 float -to make a particular thing in a single line
 position -control position of element in html
  static
  fixed
  absolute
  relative
  sticky
zindex
flexbox -use to arrange html elements in rows or colmun
Grid -used to display element in rows and colmun ,where we can fix the column width
grid -tempale -clomun/row :to set width of colmun /row
row gap- gap btw row
colmun gap -gap btw colmun
linear-gradient-it is used to set combination of background color
background-image:  linear-gradient(direction ,color)
css animation- @keyframes animation property to define 
animation -www.animate.style.com(reaload animation)
aos animate-scroll animation
website hosting-
 -netlify(easy way)
 -github -used to control versions of a code
  commands
   *git status(it is used to check status of git inside the folder)
   *git init(used to create or intiate git repository in a folder)
   *git add .(used to track all the untracked files to git repository)
   *git commit -m "your_message"(this is used to save or  store tracked files to git)
 -vercel
media queries -used to design responsive web page
 width and heigth of the view port
 orientation of the view port
 resoultion of the view port
 @media keyword
 screen break points :480px-small,760px -m,992px -1arge,1200px -xl
---------------------------------------------------------------------------------------------------------------------------------------------
                                             BOOTSTRAP
---------------------------------------------------------------------------------------------------------------------------------------
 used to build fast and responsive pages
 predefined classes of style commonly used bootstrap classes
 -container,container-fluid
 -border
 -colors:success-green, danger-red, warning-orange, primary-blue, info-skyblue, dark-black, light-white, ash-grey
 -margin: m-four side ,mt-margintop,mb-margin bottom,ms-margin-start,me-margin-end space-1/2/3/4/5
 -text-center:to center the content
 -padding-p/pt/pb/ps/pe-1/2/3/4/5
 -background-bg
 -text-light
 -img-fluid
 -width: w-1125/50/75/100
 -fontsize:fs-1/2/3/4/5
 -fontweight:fw-bold,bolder...
 -button:btn,btn-danger,btn-outline-light
 -grid:rows-maximum division as 12 colmuns 
      :colmuns-maximun division as 12 rows
----------------------------------------------------------------------------------------------------------------------------------------
                                             TAILWIND
------------------------------------------------------------------------------------------------------------------------------------
docs>framework guides>vite (do the below follow steps )




------------------------------------------------------------------------------------------------------------------------
                                          JAVASCRIPT
------------------------------------------------------------------------------------------------------------------------

 nodejs: its a  collection of libarieas and runtime enivoirment for JS
 basic concepts in JS:
 --------------------------------------------------------------------------------
        -display contents: console.log(content) method
        -data types:
              -string:content inside double qoutes or single qoutes
              -number: console.log(1000);
              -boolean:true/false
              -undefine:unassigned variable with values
              -object
              combine different data
               -concatination : , combine with different datatype -("string", 1000 )
                              : + combine and convert it to string -("string"+ 1000 )
                -template literals : combine diiferent types of data within a back tick symbol, its uses $
                 (variableName) to display variable ( ``)
              -variables:used to store data
              -identifiers:set of rules which define what name should assign to variables
                   creation of variables 
                   1 using var keywords: syntax- var variablesName / var variable_name
                   2 using const keyword:syntax- const variable declartion of contsant varaible 
                   3 using let keyword:syntax -let variableName=value
         -Hoisting :moving a varable decalration to the top of the code
          -differnece btw different variable in JS
          
          var                              const                      let
          --------------------------------------------------------------------------------
          1 use var keyword            use const keyword              use let keyword
          2 can reassign its value     cannot reassign its value      can reassign its value
          3 global scope               block scope                    block scope
          4 hoisted with intial vaule  hoisted without intial value   hoisted without intial value


-operators in js
--------------------------------------------------------------------------------
  1 assignment operator : =
  2 arithmentic operator : +,-,*,/
  3 relational operator :> ,< ,<=,>=,==,===,!=
  4 logical operator :&&,||,!  return boolean
  5 increement operator:++ (pre ++a,post a++)/decrement operator:--(pre--a,post)
  6 short hand operator :+=(a+c=c - a+=c)
  7 for spread is
  8 REST operator :used to combine rest of the data to a single array /use ... operator
  -desicion making/condtional statment
  --------------------------------------------------------------------------------
  1 if statement: syntax- if (condition){code to be executed}
  2 if-else statement:syntax- if (condition){code to be executed}else{oppostie of the code to be executed eg false} 
  3 else if ladder
  4 switch statements:syntax -switch(condition){case answer1:statement1 break; 
                                                case answer2:statement2 break;
                                                default :defaultstatement}
- looping statment:to repeat same task multiple times
--------------------------------------------------------------------------------
 1 while loop: syntax
  >intialize a variable
  >while (condition ising variable)
   -while loop execute when condition become true
  >change the value of the variable used in the condition      
 2 for loop : syntax:
 for(intialize variable ;condition;iteration)
 {execution code}   
 >break :which is used to break the execution from a loop and go outside the loop                                      
 >continue :which is used to skip the current iteration and go to the next iteration
 3 nested loop: loop inside loop
   syntax -outer loop{
     inner loop{
      code to be executed
     }
   }

-function
--------------------------------------------------------------------------------
 used to perform a specfic task,normal function Hoisting
 function definition part : define task to be performed by the funprection
 syntax:function function_name(arguments1,...)
 {
  function body where we can define task to be performs using arguments passed  to the function
 }
 function call:  used to to execute in function in js
  syntax:function_name(parameters1,...)
 return statements used to return the execution from definition of function call along with  value from its definition,return
 Types of function
   1)Predefined function :eg-console.log(content)
   2)Arrow function :used as an alternate function for normal function eg- (a,b)=>{return a+b;}
     syntax:var/const/let function name =(args1,arg2,..)=>{
     function bodyto perform task
    }
   return is only required when curly braces is needed 
   3)Callback :a function inside another function call
     syntax:function_name(()=> {function body})
   4)Anonymous function :they'r self execcuting nameless function
     eg- function(a,b){return a+b;}
   5)Recursive function:perform a task repeatedly calling  a function inside its on definition
     syntax : function function_name(){... function_name()}
   6)nested function:a function inside a function
    closure property in nested function child function can access it parent
   6)User defined function :eg- function add(a,b){return a+b;}
   7)constructor function :eg- function name(a,b){this.a=a;this.b=b;}


- Array
-----------------------------------------------------------------
1)array is a collection of elements of same data type stored in a single variable
  Methods
  -push(value):insert values to the end
  -unshift(value): insert value to the start
  -pop():remove last element
  -shift():remove first element
  -splice(startindex,deletecount,value1,value2,..):insert and delete elements at
  -slice(startindex,endindex):return a subset of array
  -concat(array):merge two arrays
  -sort(callfunction):used sort existing asscending or decsending order eg:
  -forEach(calbackfunction):alternate for  " for-of loop"
  -filter(calbackfunction):create a new array with values statisfying condition applied in the existing array can only be used in if(condition)
  -find(calbackfunction):return a value which statifies the condition in the 
  -map(calbackfunction):return a new array with vaule after applying a mapping function to the existing array
  -reduce(calbackfunction): which will return either first/ higest o/r lowest o/r sum of an exsiting array after applying reduced function,
  -some(calbackfunction):returns a boolean which statifies condition applied in an existing array,for multiple we use 'every'
  -flat(depth):reurn a new array with reduced dimension of an existing array to its depth value(if deapth is infinty this flat will awlays return 1d array)
  -includes():weahter a element exist in array it return true or false
  -splice(start,deletcount,replacmentif needed):return the existing array after removed the element/and can replace the element after removing
  -indexOf(element):returns index number
  -reverse():to reverse the array
  -join(seprator):convert array to string
string
-------------------------------------------------------------------------------
1)string is a collection of characters stored in a single variable

Methods
- length:returns the number of characters in a string
- toUpperCase():convert string to uppercase
- toLowerCase():convert string to lowercase
- slice()-start
- substring(startindex,endindex):returns a subset of the string
- split(separator):split the string into an array of substrings
- includes():same as in a array method
- concat(string):merge two strings
- indexOf(string):returns the index of the first occurrence of the specified string
- trim():remove leading and trailing spaces
- charAt(index):returns the character at the specified index
- lastIndexOf(string):returns the index of the last occurrence of the specified string
- replace(oldstring,newstring):replace the old string with the new string
- toLocaleLowerCase():convert string to lowercase according to the locale
- toLocaleUpperCase():convert string to uppercase according to the locale
- objects:used to store data in key -value pairs,{key1:value,key2:value2,...,keyn:valuen}
 >To acceses values stored in an object
 -bracket notation:eg-objname['key1']
 -dot notation:eg-obj.key1
>To check a key present in an objects
 -use "in" operaotrs ,it returns boolean value,syntax:"key" in objectname,eg:"empid" in employee
 -hasOwnProperty() object method, return boolean ,syntax :objectname.hasOwnProperty("key"),eg:employee.hasOwnProperty("empid")
>To insert value in an object
-objectname["key"]==value  or objectname.key=value
-Object.assign(destintaion,source)/eg: Object.assign(employee,{empVaccstatus:true})
-Object.key(objectname)//return all keys in the object
-Object.values(objectname)//return all values in the object
-delete keyword :it removes a key from an object
-destructuring of an object:used to acces the values in aboject without access in using any notation
     syntax:const {key1,key2...}

Exception/run time error handling:use try-catch ,block
------------------------------------------------------------------------------------------------------------------------
OOPs: object orriented programming language
   >basic concepts:
     class: blueprint of object,use keyword 'class',function used inside class is known as method,
       predefined function-'constructor' intializing class properties.

     object:instance of a class/real world entity/use to access class prperties/function outside . create an object: new class-name()

     reference: 'this' keyword used to link properties/functions with its own class
    >features of oops:-
     inheritance:one class can inherit the properties of another class
      1. classical inheritance using the keyword 'extends':Eg class child extends parent//now you can access the properties from parent
      2. prototypal inheritance:eg-  using keyword __proto__//child.prototype = Object.create(parent.prototype) //

     polymorphism:one: method can perform different functions

     encapsulation: hiding the data and methods from the outside world

     abstraction:showing only necessary information to the outside world

------------------------------------------------------------------------------------------------------------------------
                JavaScript:FRONT END
----------------------------------------------------------------------------------------------------------------------------------
1. used to provide behaviour to HTML elements
2. applying JS to HTML elements
   >internal JS
    -JS code in script tags
   >External JS  
   -link an external file using Script tag
3. DOM: document object model : tree structcure using object corresponding to a web page
      DOM methods:- used to select HTML elements into JS

        -using Tag :document.getElementByTagNAme("tag")
        -using id  :document,getElementById("id")
        -using queryselector: document.querySelector("tag/#id/.class")
        -using queryselectorall: document.querySelectorAll("tag/#id/.class")
4. Events :are triggerd by user action,enevents occured in html lements
      -mouse triggered events :-click,drag and drop
      -keyboard triggered events :-key press,key down,key up...
      -touch related trigger events:-touch
5. handle an events in HTML: event-function-call(),behaviour change must define as a function in JS
6.acceses /update context of an html element in JS
 -innerHTML/innertext property
7.permanent storage -store data in browser ,stored as permanently,as key value pair.
  type of both key  and value must be string,
  to convert value to string -use JSON.stringfy(value)
   string data to normal type:JSON.parse(value)
-local storage:
  :setItem(key,value):used to store data
  :getItem(key):used to retrieve data
  :removeItem(key):used to delete data
  :clear():used to delete all data
-session storage:
8.Working Browser JS runtime envoirment
 -Javascript engine:it handles js execution ,convert js code  to code understand
 by browser engine
 call stack:used to keep track of currentlyexecuting function,make sure each
  one finshes before moving to next.
  it is a single threaded programming
    js handles 2 types of function
    -synchronous function: function executes one by one,without any delay
    -asynchronous function:executes in parallel,with some delay
      :callBack function:task queue(macro task queue):setTimeout/user events (click/drag ...)
      :web APIs:stored in (micro task queue which is a priorty queue)
   -event loop:it manages th flow of the code ,ensuring asynchronous operation and user interaction
  -heap:used to store variable and objects in js 
9.asynchronous function handling in JS:
  call back  function :Nesting of call back function will leads to callback  hell
  that means js won't give any respoonse for this kind of call
   -promise: used to resolve asynchronous function it will defnitely gives you a response a ways to resolve promise
     -resolved state:if asynchronous function call return a response from resolved state we have to use then method
     -rejected state:if asynchronous function call returns nothing after making the cal the state.
         : async and wait keywords : to make promise much more easier, to avoid callback from promise ,is a function is asynchronous then only we ccan await inside
    the  function
         :Await:make a function for waiting for promise
10. API(application programming interface):used to communicate between application using internet
  types of API's:Based on communcation
  -REST/SOAP API:used to communicate between server and client application using HTTP protocol
  -SOCKET :WEB CHATTING application
  -GraphQL API:used to communicate between server and client application using HTTP protocol/use is same as REST but for bulk amount
11.URL(Uniform Resourse Locater):eg-https://www.youtube.com/shorts/SackNYbphrE            (base url:-https://www.youtube.com )
-protocol:https
URI(Uniform Resourse identifiers):
path parameter : Multiple Parameters:
URL: https://example.com/products/123/reviews/456
Definition: /products/{productId}/reviews/{reviewId}
Path Parameters:
productId = 123
reviewId = 456
URL: https://example.com/search?query=shoes
Query Parameter: query = shoes
Description: Used to search for items matching "shoes."

12. HTTP(hyper text tranfer protocol):wihch is used to make request via internet
 2 part:
 -HTTP request:client to server
   header part:to keep secret data
   body part:used to hold data(binary/xml/json when using REST xml when using SOAP) to be transfered from client to server
   -HTTP:methods-
   -GET:used to retrieve data
   -POST:used to store/create data
   -PUT:used to update data
   -PATCH:used to update partial data
   -DELETE:used to delete data
   -HEAD:used to retrieve header
   -OPTIONS:used to check HTTP method support
 -HTTP response status: to get respone status of request ,browser is using http response /server to client
 status code (is a 3 digit code):eg
   :1XX:informational
  :2xx:ok
  :3xx:redirect
  :4xx:client error /not found
  :5xx:internal server error
 

13.JSON(java script notation):is data format used to transfe data from application to another application
-key value pair:used to store data /key always string type
 eg: "username":"shibin","age":50
14.API call using -xmlHttpResquest(XHR)
  XMLHttpRequest class has predefinded function and properties to make sending
  request and response btw application in internet
  -object of XMLHttpRequest is used to interact with server application
  -xmlhttpResquest class properties
      :readystate : return a number which indicates the state of a request,if
       readystate == 4 then which recieves the response
      :responeText :return a string that contain the response to the request as text
      :status :return a number that indicates the status of the request
  -XMLHttpRequest:class methods
   : open():used to intialize a request
   : send():used to send the request
  -events:
    :onreadystatechange:an event to occur whenever the value of readyState changes
  steps to make api call
  1. create an object of XMLHttpRequest class
  2. open the request using open() method
  3. send request
  -API usinf fetch() API:
    :fetch() function return  promise ,then resolved response will get from "then" method and reject method get from "catch" method
  -API call using Axios libaries: Axios is a promise based HTTP client for node.js and the browser

15.javascript modules: used to transfer data from 
   one js to another
   -use import/export statements:
     :import statement-use an exported data from external js file
       2 types
        :import with curly braces: if data exported using export keyword
        :import without curly braces: if data exported using export default
     :export statement-used to export data from js file
       can be used in 2 diiferent ways 
         :using export keyword :used to export multiple data from a single js file
         :using export default keyword :used to export single data from a js file/must be at the end of file

16.Axios call in react:
-using axios libary :install axios: npm install axios
-To make Http request' using axios:axios(config)
   config:is predefined object with keys:(mehos,url,data)
-HTTP response using axios will always will return object with predefined keys(data(serverresponse),status)
-create services folder inside src of your react app 
   

----------------------------------------------------------------------------------------------------------------------------------------------  
                       REACT: advanced frontend application libary
----------------------------------------------------------------------------------------------------------------------------------------------  

1).Basic React:
  -React App is a collection of different libaries
  react app consist of different components display contents on browser.All the components are arranged in a tree structcure
  Tree as a single parent or root node which by default known as  "App component",components are reusable .
  Pure JavaScript functions:To build components.it will retrun how to display contents in browser.these function are capable of doing a single task with the help of arguments.function with no side effects.
  -decalrative appoarch
  -Virtual DOM :light weight memory that reperesentation of real DOM
  -Babel libary :which is used to display contents into browser
  -JSX(javascript xml):js extention for writing HTMl code in JS,which is used to display contents in browser
  EX : JSX elements :- const heading= <h1>heading</h2>
  rules for using JSX:
   1. every JSX must be inside a single Tag.parent can be any container tag(.div, footer, article )
      or react fragments (<></>) tag without name
      in jSX we has to use "camel" case JSX contents: eg :- fontSize
   2. every JSX code must have a closing tag.if a tag has content then:
      <starting tag> content </ending tag> .if a tag has no content : <starting tag> content </ending tag>
      or we can use self closing tags (<starting tag/>)
   3.instead of attribute "class" we have to use "className" in JSX
   4.instead of atribute "for" we have to use "htmlFOr" in JSX,we can directly pass code inside a curly braces (eg:{js code})

2) react app creation
-2 ways to create react app
  -CRA(using create-react-app command)
  -Vite: Tool for building web application
   install vite globally :- (npm i -g create-vite)
   react app creation using Vite :npm create vite@latest reactAppname -- -- template react
   -to genrate build :- npm run build(when using netlify to deploy you need to use this command)

3)Files and folder structcure of react app using vite
  -package.json file : npm configuration files for the project 
  -package-lock.json file:used to hold version of depended package of the project.
  -eslint.config.js:- which may contain JS configurartion files
  -node_modules folder :which is used to store depended packages of project,
  we can genrate node_modules folder with the help of command npm install/npm i
  -public folder:used to hold that can accessed by any part of the project
  -index.html file :entry point of react application
  -src folder : logic of react app is defined here
  -main.jsx file : used to render (displaying in browser) react app in html element with id as "root"
      :createRoot():which is used to create a root to display react components inside a browser DOM node.
      :css file:sued to define style for all components in react app
      :app.jsx file :used to create react root component
      :asset folder:used to hold media files used in react project
4)components :used to display content in browser,to 
  create component create jsx/js file with filename starting capital letters
  -create component in 2 ways
   :function/stateless based components :use js pure-function to build components,function name must similar to its filename.it must return jsx code 
   :class/stateful based components :use js class to build components,function name must similar to its.class inherit react component class,render :this method in class used to return jsx
  -lifle cycle methods  of a react component:-
     
   -mounting phase: putting jsx into DOM
     :constructor()
     :getDerivedStateFromProps()
     :render: displaying contents on the browser
     :componentDidMount():when this comes the mounting phase is compeleted
   -updating phase: updating jsx in DOM
      :getDerivedStateFromProps()
      :getSnapShotBeforeUpdate()
      :shouldComponentUpdate():return boolean value
      :componentDidUpdate():
   -unmounting phase: removing jsx from DOM

class based components                      function based components
------------------------------------------------------------------------------------
1  use  class    to create,                1 using JS pure function and return 
    render method must return jsx          
2  Statefull component                     2 stateless component
3  use this keyword to call method          3 no need to use this keyword
4  use constructor to initialize state     4 no need to use constructor to initialize state
5  use lifecycle methods                    5 no need to use lifecycle methods
6  HOOKS are not used                       6 HOOKS are used 
7  

5)data sharing between react components
  -data can be transfered from parent to child:use "props" Object
   :props :is a property of a component :its an object used to transfer data from parent to child,
   parents data can be shared via child tag attributes.to acceses parent data in child use props 
6)condtional Rendering: used based on condition Rendering jsx
  elements in browser,using if-else,ternary operator(?:) /if statement(&& operator)
7)short cut for function:-//rafce -arrow fucntion
///rfce-normal fucntion
8)List in React :use map array method. set key atribute to duplicating JSX element in a list
9)CSS styling in react :
  2 types
  1:-inline css :use style attribute to apply style to JSX element 
    The style must be as JS object   
    syntax: style ={{css property}}
  2:-external css:define styling in an css file and also link css file to component file using import statement.we cannot import css file into a variable in compoent file
  - import "css file path"
 Using CSS module files: file with extension .module.css
is known as css "module file" in the we have to define style in class.
To use module ccss we have to import to the component file.
-import variableName from "ModuleCss file path" to apply style in component,use variableName.
classname
  -Material UI:-npm install @mui/material @emotion/react @emotion/styled
  -React Bootstrap :-npm install react-bootstrap bootstrap:choose a theme for bootstrap project
  choose a theme from (bootswatch.com)
  com/ for selecting theme .download bootstrap.min.css file of theme and add the file inside src folder.import bootstrap.min.css file to 
  main.jsx
10)event handling in react :use event handler function to handle events in react app:syntax:event ={function call}
  -binding function without arguments:event ={fucntionName}
  -binding function with arguments:event ={()=>fucntionName(arguments)}
  -binding function with argument as event :event ={(event)=> fucntionName(event)}
11) State in react :which is used to store data of a componenet ,when state i value changes component will rerender
12)HOOKS in react : predefinded methods in react .which is used to provide react component features to function based component
   -rules to call hooks in functional components
   1:call hooks at top of the component
   2:call hooks only once in a component
   3:call hooks only inside react function
   4:HOOKs cannot be conditional
   Based on react features there are different types of hooks are available 
   - Build in Hooks
     -useState(Initial-value) hook: used to create state in functional component, this hook will return an array of 2 arguments. |
       first argument is state
       second argument is a fucntion name used to update the state.
       state updating function name must strat with 'set'

       -useEffect(Effect function,dependency array) hook: used to handle side effect in functional component,we can pass sideeffects as its first argument as a callfunction,we can also pass an optional dependency argument to decide when to apply side effects in component
       - useRef(initial value):is react hook that lets you reference a value
         that's not needing for rendering . intial value i soptional ,it returns
         an object "current" key 
    -Custom hooks : create js file to define a specfic  function for a special task. export
      export the function from that file. function naem must start with 'use ' keyword.
    -useSelector(): hooks used to select sstate from a redux store
    -useDispatch(): hooks used to dispatch action from components
    -useParams(): hooks will return dynamic value of route assocaited with a component
13). form handling in react : there are 2 ways to manage data inside the form by a component
    - controlled components - these are components form data inside its own data
    - uncontrolled components - components who access form data using its DOM elements reference
14). Set up path or url forr component:use a package react-router-dom
     -to install:-npm i react-router-dom
     -steps :
      1:Render the entire react app inside  "BrowserRouter" components of react-router-dom libary,provide this in main.jsx
      2:inorder to setup path component ,make each componenet must be  inside 
      "Routes" component of react-router-dom libary ,provide this step inside app.jsx file
      3:to set up path for an components ,use "Routes" compoent of react-router-dom libary .Route component has attribute
      like "path" and "element" inorder to setup routes for components All route component must be inside route component     
    dynamic routing :we can set up a dymanic /changing value in url along:
    symbol so react app will understand the value along with a : is dynamic part of this url
    -to set aup apage not found url as path * its path
15) Higher order Components(HOC)  :Are components whose are argument will give another component eg: Route component
16) data sharing btw components in react-
  -state lifting :data sharing is using props .we will create state in common parent of data to be shared components .share state upddation function one componentss and state to another components
  -using redux libary
  -using context API

17)Axios call in react:
   -using axios libary :install axios:npm i axios
   -To make HTTp request using axios:axios(config)
    -config:is a predefinded object with keys(method,url,data,header)
    -http request using axios will always return object with predefinded keys(data (server response),status )
    -create a service folder inside your src of your react app

------------------------------------------------------------------------------------------------------------------------------------------------
                          CONTEXT API -Data sharing method
--------------------------------------------------------------------------------------------------------------------

1.Avoid props drilling while sharing between Components
2.To share data it uses context of react with the help of context we share data inside 
3.steps to perfom data sahring using context api 
     -create context : use createContext() method in react
     -use Provider of context to share data to the component . Provider
      value key will halp context to share data we can pass value as 
      object
    -TO acceses the context from the component : use useContext hook,useContext(context_name) we give the data shared via context
4.create a folder for context 
  -inside folder react component for perfom data sharing using context
  -create context  and export it
  -create state inside the component
  -use context Provider provide the state as its value to the componenet children
  -use children props inside the component to get all children of it
  -wrap the component inside root component of react app inside main.jsx file
  


       



----------------------------------------------------------------------------------------------------------------------------------

               React with api project steps

---------------------------------------------------------------------------------------------------------------------------------

1. create a react project using vite
2. Remove all unwanted contents app.css index.css,app.jsx 
3. install any styling libary to project
4. create a folder for holding different pages for this application in src folder
5. setup path for components for router libary
6.create a compoenent folderr in order to hold resuable codes in differnet pages of react app create compoenent file inside it
7. to make API call in react use axios(config) method ,POST,Get,delete request

--------------------------------------------------------------------------------
                              
                              JSON server creation

--------------------------------------------------------------------------------

1.create a server folder to store json file
2. create a package.json(npm configuration file) file inside server  folder use command( npm init  -y)
3. install json server package in server folder to run file use command to install json server : (npm i json-server) 
  stable version of json server(npm i json-server@0.17.4)
4. create json(db.json) file for storing project data
5. to run json file avalible in browser port use command in server folder :npx json-server db.json 


--------------------------------------------------------------------------------
                  JSON derver deployment
--------------------------------------------------------------------------------

npm i json-server@0.17.4

1. Create a index.js file in serverf older
2.update script key of package.json file with{"start":"node index.js"} and remove test "echo" from it
3.create .gitignore file, and wrtie node_modules inside it to ignore this node_modules when github
4. define steps to run db.json file using json-server in index.js
   -import json-server ::"const jsonServer =require("json-server")"
   -create a server for mediaplayer app in order to run our server app ::"const ELServer =jsonServer.create()"
   -create a middleware to covert json data to js :: const middleware =jsonServer.defaults()
   -create a port for executing our app:: const  PORT =3000
   -set up  a path/route db.json file so that client can make the request ::const route =jsonServer.router('db.json')
   -use the middleware ,router inside the server :: ELServer.use(middleware)  
                                                    ELServer.use(route) 
   -run the server using given port ::ELServer.listen(PORT,()=>{console.log(`ELserver is runing at PORT ${PORT} and its waiting for client request `);})
   -To execute our app we    have to use ::node index.js in the terminal,so that we can see the output in local host:300
5.push it to github: 1. git init
                     2. git add .
                     3. git commit -m "First commit"
                     4.git remote add origin https://github.com/username/repository-name.git
                     5.git push -u origin main
                     when repushing(git add .
                                    git commit -m "Your commit message"
                                    git push)


  ----------------------------------------------------------------------------------
                               REDUX -state managment Tool
  -----------------------------------------------------------------------------------------------
1).A JS libary for predictable and maintable global state managment
2).Redux consists of 2 packages
   1.React Redux:official package react binding package
   2.Redux Toolkit:the Official opinaited batteries-include toolset for efficeint redux development,npm install react-redux
3)important api used in redux:
   -configureStore():used to create store for redux
     :diffrent steps to create in react app
       -create a folder redux logic in src folder
       inside redux ofolder create a js file for creating redux store
      -to provide store to our reacct app use "Provider" compoenent of react-redux libary .Provider component has "Store" atribute using it we can provide as the root component of our react app.Give these steps in main.jsx file
    -createReducer(): used to create reducers where we can store updated state insdie store
    - createAction() :used to create action where we can can logix to create state output of action automatically return to its reducers.
  -createSlice():used to combine action a  reducer in a single file.
    -steps to use slice for react app
      -create a js file for defining slice
      -createAsyncThunk():used to make asynchronous call in an action from store in a redux .it accepts to 2 arguments   
        1.action type String("slicename/actionname")
        2.callBack function it can return a promise.its output can 3 types.
           1.pending state
           2.full filled state
           3.reject state
        "extraReducers" in slice can handle promise return action.becuase it has define diiferent cases to update slice state ,bsaed on promise output
4)Hooks used in components for managing state using redux
   -useSelect(state=>state.reducer_name): used to select state from store in a component
   -useDispatch(): used to excute an action from a component.hooks will return a fucntion this is capable of dispacting as it argument when we call the function
   -action without argument :dispacth-function(action-name())
   -action with argument:dispatch-function(action-name(arg1..)),no access argument of action is
    slice reduce function is uses its second argumnet which is an object with 2 object key plyload
    type. payload will give the argument from action  dispatch by the component

----------------------------------------------------------------------------------

                               MONGODB- datbase

----------------------------------------------------------------------------------

1).DATABASE :-used to store and manage data permentaly (firebase,mySQL,SQL,MSAccess,ORACLE,MONGODB)
2).MONGODB :is NOsql databse ,data stored as JSON documents is stored as BSON data ({"key" :"value"}),To store multiple json document is known as collection
3).What is differnce between SQL and MONGODB

               sql                                              MONGODB
        ---------------------------------------------    -----------------------------------------------------------------------
        
        1.Relational SQL DBMS(table manner)                              1.Document orriented NOSQL DBMS
        2.DAta stored in table every must have                           2.Data stored in collection, as json document
          rows and fixed columns 
        3.Uses a fixed schema                                            3.Uses a Dynamic schema
        4.support rich set of  data types                                4.limited set of  datatype
        5.Uses in traditional buissnes app                               5.Uses in big data and real time app
        6.optimized and complex joined tranaction                        6.optimized for scalbility and perfomance

4).enivoirment of MONGODB
    -MongoDB Atlas  : The fully managed service for MongoDB deployments in the cloud
    -MongoDB Enterprise  : The subscription-based, self-managed version of MongoDB
    -MongoDB Community  : The source-available, free-to-use, and self-managed version of MongoDB
5).MONGODB shell/Mongosh :is terminal to right MongoDB codes
6).Collection :used to store json document to name a collection use only small letter and its plural formar
7).mongodb genrate a unique value to identify each colllection using _id key its value a hexadecimal number
8).CRUD operation perfom in mongoDB 
   :- TO Get or Read a single document from monogDB collection :use findOne({key:value}) 
   :-find() :TO get/read all adcument from mongoDB collecion and wich will return  the all "document same
   present in collection
   :-insertOne({key:value}):TO insert a single document on monogb  collecion
   :-inserMany([{key:value},{key:value}]): to insert multiple a ddocument to mongDB collection
   :-countDocument():TO get total count of document collection
   :-limit(count): To limit document while getting from a colllection
   :-skip(count):to skip documents while geting from a collection
   :-sort({key:1or-1}) :This is used to sort while getting from a collection
   :-find({key:{$gt/$gte/$lt/$lte/$eq/$neq/$exists}})
   :-updateOne({key:value},{$set:{key:value}}):to update a single mongoDb collection
       we can update statement :$set,$inc,$dec,$push,$pull
   :-deleteOne({key:value}): to delete a single document
   :-deleteMany({})
9).Aggregation:used to combine/joining two collection in  monogDB 
    using $lookup:
           {
         $lookup: {
           from: "<joined_collection>",
           localField: "<local_field>",
           foreignField: "<foreign_field>",
           as: "<output_array_field>"
         }
       }




--------------------------------------------------------------------------------------------------
                         Server side /Backend :used to resolve the client /front end reqeuest 
--------------------------------------------------------------------------------------------------

Node js:provide a runtime enivoirment for js outside the browser       
----------------------------------------------------------------
1.is free opensource ,croo platform runtime enviorment that let us to create servers(used to resolve multiple client request)
2.features :
    :- Extermly fast
    :- highly scalable
    :- asynchronous functions:
3.Node js Global objects :Objects can be accesed througout node app without it eg. "process"
   Objects, "envoirmental variable" in process  used to store system to store system configuration/secert data/password of an application
4.Node js Module System :used to share from one file to another using commonJSModule, sytem 
 - require ('package_name/file_path') : to import data from one file /package to another
 -module.exports/exports keywork : to export data from a file
 -Predefined/Built in modules in node js :
      :fs module :file system module to handle file 
      :http/https(for security) module :used to create http server 
      :events module :manage userdefined events
      :crypto module:secure data handle
5.execution model: Event driven ,non blocking I/O model ,optimized asyncronous task
6.API Access : access to system level API (file system,network,process)
7.Working of Node JS:used to resolve client request and send response while woring with single .threaded
     -non blocking
     -asynchronous functions

-----------------------------------------------------------------------
Express js :NODE js framework useed for serve creation
-----------------------------------------------------------------------

1.used in client side application to create server with node js  feature.
2.steps to create Express server for resolving client request
  1:-create a server folder for server application
  2:-Package.json file inside server folder for that we have to use :npm intit -y
  3:- we have to update package.json file "script" key value as the following object
     -{"start":"node index.js"} and remove its test key and value from it
     -packages install a needed to create node server app
     -express package : used to create server  :npm i express
     -cors package : which  is used to enable cors orgin reasourse sharing  :npm i cors
     - dotenv package : used to load content .env file into process object:npm i dotenv
     -mongoose package used to communicatate between node.js app and mongodb
     -jsonwebtoken :used to  for authorization
     -multer :used for handling multipart/form data request

     -create .env file in server folder ,which is used to store environmetnal variable of a project/app
     -create .gitignore in server folder which is used store file /folders to ignored while adding to git.
        and add node_modules and .env 
     -we have  to create index.js file to run define express server for resolving client reqeuest from browser
      -import express dotenv and cors in index.js file
      - create s express  server  using express package
      - use cors in our server app to enable sharing between different application
      - we have t ouse express.json()  in server app for parsing json data from client request  
      -create a port for server app (process.env.PORT) when deploying
     -to resolve http request using express server:
        -expressServerName .httpResquestMethod("path",(request,response)=>{
          using respone object share server response to client
        }) 
      -server has to use express.static(static file/folder path) to export the static file/folder from server  
  3.how to set up path /URL for resolving clietn request in server
     1.we have to create routes folder in server folder and create a js file inside the routes folder for defining for corresponding to client request
      steps to create path in js:-
       1.import express
       2.we have to create an object for express router class which is cabable of setting a routes in server
         -RoutesObject,httpResquestMethod("path',controllerName)
         
    2.to set up controller for server app : used to define logic to resolve client request
      -create a folder controller in serve and create a js file and insdie it for defining logic to resolve client request
       -export each controller from js file 
       -import controller in router.js file use the controller in corresponding reqeust
       -syntax of controller 
       controllerName  =(request,response)=>{
        using respone object share server repsonse to client
       }
       -We have to setup database connection from node.js server
       -we have create a folder to defining db connection in server folder
       -inside db folder create a folder create js file to define connection steps
        -import mongoose
         get database connection string string from mongoadb atals js file
         -to connect with mongoDb use connect method of mongoose pass connection string as its arguments it will return promise
         We have to import js file in index.js file
      -to set up model for communicatiing node.js and MONOGODB
        -create model folder in server folder 
        -create js file inside the folder for create model
        -create model  schema 
       -export model
     -to set up  the authourization using middleware
       -to create folder for middle in server folder
      - create a js file inside folder to define  middleware and export the middleware 
      -use the middleware in route before controller
    -To handle multipart/form data reqeuest multer
       -create  a js file inside middleware folder
      -import multer 
      -create a 'upload' folder in server for storing upload files.
      define strorage object in js file
      -created instance using the stroage and export it from that file using it in routes.

--------------------------------------------------------------------------------------------------------------
 | mongodb+srv://shibin123:shibin@cluster0.3krd3.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0     |
---------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------
                                      MONGOOSE :NODE JS PACKAGE FOR MONOGODB DATA MODELING
--------------------------------------------------------------------------------------------------------------

1.Mongoose is an  ODM(Object Data Modelling) libary for mongodb ,helps to create and mange MongoDB
  documents with node js
2.install mongoose in node js application :npm i mongoose
3.schema : a  schema defines the structure of your collection documents. A Mongoose schema maps directly to a MongoDB collection.
 to create a schema we have to create object for mongoose "schema' class.
4.Models take your schema and apply it to each document in a collecion create model in mogoose,use model method syntax model("modelName",schema)
 these modela are responsible for all document interaction writing reading  updating and deleting (CRUD)
5.In our Node.js contorller will communicatate in order to mange data in mongoDB 
6.CRUD operation in mongoose 
   -to create a document using mogoose in mongoDb ,create an of object in  model  with same order of it schema after that we have to save 
   the object inoder to apear changes in  mongoDB using save() method
   -Read/get document from mongo DB : find(),findOne(),findById()
   -Update a document from mongoDB : updateOne(),updateMany(),findByIdandUpdate(_id of document,updateQuery)
   -Delete document :deleteOne(),deleteMany(),findByIdandDelete(_id fo document)
7.mongoose query helper : skip(),limit(),sort()
  



--------------------------------------------------------------------------------------------------------------
      JSON WEB TOKEN JWT:NODE JS PACKAGE FOR AUTHENTICATION
--------------------------------------------------------------------------------------------------------------

1.instal jsonwebtoken libary :npm i jsonwebtoken
2.Token generation using jwt :sign(payload,password)
   -payload  :used to store data inside Token creation
3.Token verify using JWT :verify(token,password) return a respone if token if token is verified else error 

--------------------------------------------------------------------------------------------------------------   
                                  Middleware :NODE JS
--------------------------------------------------------------------------------------------------------------
1.used to control request response cycle in server .before resolving the request server can perform and task (autourization changing etc)
usomg middleware 
2. Middleware are function with 3 arguments, they are request response next
  - here request will give your client request
  -response object will give your clieent request
  -next method used to control request
3.Middleware can be 2 types
  -Application specfic middleware :middleware will be active for all client reqeuest 
  -Router  specfic middleware : middleware will active for only selected route/path


--------------------------------------------------------------------------------------------------------------
                    MULTER :node.js middleware for handling multipart/form-data
--------------------------------------------------------------------------------------------------------------
Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files.

USAGE :-Multer adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form.

install multer using :npm i multer

multer can used to define storage sapce for uploading file

cake.com
javascript,html,css
a simple javascript project to show frontend design or static website
https://bakerycom.netlify.app/
https://bakerycom.netlify.app/
